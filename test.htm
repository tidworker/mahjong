<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>默禪</title>
    <style>
        @font-face {
            font-family: Bakudai-Regular;
            src: url(https://cdn.jsdelivr.net/gh/max32002/bakudaifont@1.48/webfont/Bakudai-Regular.woff2) format("woff2");
        }

        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #F2F2F2;
            font-family: Bakudai-Regular, sans-serif; /* 使用自定義字體 */
        }
        #iframe-container {
            width: 390px;
            height: 390px;
            border: none; /* 移除框線 */
            margin-top: 15px;
            display: flex;
            justify-content: center;
        }
        iframe {
            width: 100%;
            height: 100%;
            border: none; /* 移除框線 */
        }
        #controls {
            margin-top: 5px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #buttonContainer {
            display: flex;
            gap: 5px;
        }
        button {
            padding: 10px;
            font-size: 16px;
        }
        #textDisplay {
            font-size: 30px; /* 調整文字大小 */
            margin-top: 20px;
            max-width: 390px; /* 限制最大寬度 */
            word-wrap: break-word; /* 強制單詞換行 */
            text-align: center;
            white-space: pre-wrap; /* 保留空白字符 */
        }
        .current {
            color: black;
        }
        .future {
            color: #BEBEBE;
        }
        .past {
            color: #BEBEBE;
        }
        .full-past {
            color: black;
        }
        #fullTextOverlay, #recordOverlay {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 300px;
            background-color: white;
            border: 1px solid black;
            box-shadow: 0 0 10px rgba(0,0,0,0.5);
            display: none;
            overflow-y: auto;
            padding: 10px;
        }
        #fullTextOverlay {
            height: 500px;
        }
        #recordOverlay {
            height: 150px;
            text-align: center;
            font-family: 'Microsoft JhengHei', sans-serif;
        }
        #closeButton, #recordCloseButton {
            position: absolute;
            top: 20px;
            right: 20px;
            cursor: pointer;
        }
        #fullTextContent {
            font-size: 23px; /* 調整文字大小 */
            text-align: center;
            white-space: pre-wrap; /* 保留空白字符 */
        }
        #recordContent {
            margin-top: 20px;
            font-size: 20px;
        }
        .recordButton {
            margin-top: 10px;
            padding: 10px;
            font-size: 16px;
        }
    </style>
</head>
<body>
    <div id="iframe-container">
        <iframe id="pageFrame"></iframe>
    </div>
    <br>
    <div id="controls">
        <div id="buttonContainer">
            <button onclick="prevPage()">Prev</button>
            <button onclick="showFullText()">Full Text</button>
            <button onclick="showRecord()">Record</button>
            <button id="nextButton" onclick="nextPage(false)">Next</button>
        </div>
        <br>
        <div id="textDisplay"></div>
    </div>

    <div id="fullTextOverlay">
        <div id="closeButton" onclick="closeFullText()">X</div>
        <div id="fullTextContent"></div>
    </div>

    <div id="recordOverlay">
        <div id="recordCloseButton" onclick="closeRecord()">X</div>
        <div id="recordContent"></div>
        <br>
        <button class="recordButton" onclick="resetCount()">Reset Count</button>
        <br>
    </div>
    <br>
    <br>
    <img src="mozen.png" alt="Mozen Image">
    
    <script>
        let pages = [];
        let currentPageIndex = 0;
        let textContent = ""; // 內建的文字訊息
        const maxLines = 2; // 主頁顯示兩行
        const charsPerLine = 10;
        let completedCount = 0;

        // Fetch text content from the 0001.txt file
        async function fetchTextContent() {
            try {
                const response = await fetch('0001/0001.txt');
                textContent = await response.text();
                initializePages();
            } catch (error) {
                console.error('Error fetching text content:', error);
            }
        }

        function initializePages() {
            const filteredTextContent = textContent.replace(/\n/g, '');
            pages = filteredTextContent.split('').map(char => `0001/${char}.txt`);
            currentPageIndex = parseInt(localStorage.getItem('currentPageIndex')) || 0;
            completedCount = parseInt(localStorage.getItem('completedCount')) || 0;
            if (pages.length > 0) {
                loadPage();
            }
            updateTextDisplay();
            updateFullTextDisplay();
        }

        function loadPage() {
            const currentChar = textContent.replace(/\n/g, '')[currentPageIndex];
            if (currentChar !== '　') {
                document.getElementById('pageFrame').src = `0001/${currentChar}.htm`;
            }
        }

        function updateTextDisplay() {
            const displayText = textContent.replace(/\n/g, '');
            const startLine = Math.floor(currentPageIndex / (charsPerLine * maxLines));
            const startCharIndex = startLine * charsPerLine * maxLines;
            let displayHTML = '';
            let charCount = 0;
            let lineCount = 0;

            for (let i = startCharIndex; i < displayText.length && lineCount < maxLines; i++) {
                const char = displayText[i];

                if (char === 'b') { // 當遇到換行字符b時換行
                    displayHTML += '<br>';
                    charCount = 0;
                    lineCount++;
                    continue;
                }

                if (charCount >= charsPerLine) {
                    displayHTML += '<br>';
                    charCount = 0;
                    lineCount++;
                }

                if (lineCount >= maxLines) break;

                let charClass = 'future';
                if (i < currentPageIndex) {
                    charClass = 'past';
                } else if (i === currentPageIndex) {
                    charClass = 'current';
                }
                displayHTML += `<span class="${charClass}" onclick="goToPage(${i})">${char}</span>`;
                charCount++;
            }

            document.getElementById('textDisplay').innerHTML = displayHTML;
        }

        function goToPage(index) {
            currentPageIndex = index;
            loadPage();
            updateTextDisplay();
            updateFullTextDisplay();
            saveState();
        }

        function nextPage(isIframeTriggered = false) {
            do {
                currentPageIndex++;
            } while (currentPageIndex < textContent.replace(/\n/g, '').length && (textContent.replace(/\n/g, '')[currentPageIndex] === '　'));

            if (currentPageIndex < textContent.replace(/\n/g, '').length) {
                loadPage();
                updateTextDisplay();
                updateFullTextDisplay();
                if (isIframeTriggered) {
                    completedCount++;
                }
                saveState();
            }
        }

        function prevPage() {
            do {
                currentPageIndex--;
            } while (currentPageIndex >= 0 && (textContent.replace(/\n/g, '')[currentPageIndex] === '　'));

            if (currentPageIndex >= 0) {
                loadPage();
                updateTextDisplay();
                updateFullTextDisplay();
                saveState();
            }
        }

        function showFullText() {
            let fullTextHTML = formatTextDisplay(textContent, Infinity, true);
            document.getElementById('fullTextContent').innerHTML = fullTextHTML;
            document.getElementById('fullTextOverlay').style.display = 'block';
        }

        function updateFullTextDisplay() {
            let fullTextHTML = formatTextDisplay(textContent, Infinity, true);
            document.getElementById('fullTextContent').innerHTML = fullTextHTML;
        }

        function formatTextDisplay(text, maxLines, isFullText) {
            let displayHTML = '';
            let charCount = 0;
            let lineCount = 0;

            // Calculate starting point based on lines
            let start = currentPageIndex - (currentPageIndex % (maxLines * charsPerLine));
            for (let i = start; i < text.length && lineCount < maxLines; i++) {
                const char = text[i];

                if (char === 'b') { // 當遇到換行字符b時換行
                    displayHTML += '<br>';
                    charCount = 0;
                    lineCount++;
                    continue;
                }

                if (charCount >= charsPerLine) {
                    displayHTML += '<br>';
                    lineCount++;
                    charCount = 0;
                }

                let charClass = 'future';
                if (i < currentPageIndex) {
                    charClass = isFullText ? 'full-past' : 'past';
                } else if (i === currentPageIndex) {
                    charClass = 'current';
                }
                displayHTML += `<span class="${charClass}" onclick="goToPage(${i})">${char}</span>`;
                charCount++;
            }

            return displayHTML;
        }

        function closeFullText() {
            document.getElementById('fullTextOverlay').style.display = 'none';
        }

        function showRecord() {
            const recordContent = `已完成字數: ${completedCount}`;
            document.getElementById('recordContent').innerText = recordContent;
            document.getElementById('recordOverlay').style.display = 'block';
        }

        function closeRecord() {
            document.getElementById('recordOverlay').style.display = 'none';
        }

        function resetCount() {
            completedCount = 0;
            saveState();
            showRecord();
        }

        function saveState() {
            localStorage.setItem('currentPageIndex', currentPageIndex);
            localStorage.setItem('completedCount', completedCount);
        }

        window.addEventListener('message', function(event) {
            if (event.data === 'nextPage') {
                nextPage(true);
            }
        });

        // 在頁面加載時初始化頁面
        window.onload = fetchTextContent;
    </script>
</body>
</html>

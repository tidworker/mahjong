<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Let's Write</title>
    <style>
        body, html {
            flex-direction: column;
            background-color: #F2F2F2;
            margin: 0;
            padding: 0;
            overflow: hidden;
            display: flex;
            justify-content: flex-start; /* 水平方向置顶 */
            align-items: center;
            height: 100%;
        }
        #container {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #grid {
            display: grid;
            grid-template-columns: repeat(100, 4px);
            grid-template-rows: repeat(100, 4px);
        }
        .cell {
            width: 4px;
            height: 4px;
            background-color: transparent;
            box-sizing: border-box;
        }
        .lettera, .letterb, .letterc, .letterd, .lettere, .letterf, .letterg, .letterh, .letteri, .letterj,
        .letterk, .letterl, .letterm, .lettern, .lettero, .letterp, .letterq, .letterr, .letters, .lettert,
        .letteru, .letterv, .letterw, .letterx, .lettery, .letterz {
            background-color: #d3d3d3;
        }
        .current {
            background-color: #808080;
        }
        #percentage {
            margin-top: 0px;
            font-size: 5px;
            color: #F2F2F2;
        }
        #buttons img {
            cursor: pointer;
            margin: 12px;
        }
    </style>
</head>
<body>
    <div id="container">
        <div id="grid"></div>
        <div id="percentage">已塗色百分比：0%</div>
    </div>

    <div class="image-row">
        <img src="jin.png" style="opacity: 0.3;">
        <img src="gon.png" style="opacity: 0.3;">
        <img src="ban.png" style="opacity: 0.3;">
        <img src="row.png" style="opacity: 0.3;">
        <img src="po.png" style="opacity: 0.3;">
        <img src="ro.png" style="opacity: 0.3;">
        <img src="mi.png" style="opacity: 0.3;">
        <img src="jinn.png" style="opacity: 0.3;">
    </div>
    <br>
    <br>
    <div id="buttons">
        <img src="back.png" onclick="history.back()">
        <img src="re.png" onclick="location.reload()">
        <img src="next.png" id="nextButton" onclick="nextWord()">
    </div>
    <br>
    <br>
    <img src="logo2.png">   

    <script>
        const grid = document.getElementById('grid');
        const percentageDisplay = document.getElementById('percentage');
        const cells = [];
        const colorMap = {
            '0,0,0': 'a',
            '127,127,127': 'b',
            '136,0,21': 'c',
            '237,28,36': 'd',
            '255,127,39': 'e',
            '255,242,0': 'f',
            '34,177,76': 'g',
            '0,162,232': 'h',
            '63,72,204': 'i',
            '200,191,231': 'z'
        };

        const textSequence = ['金', '剛', '經']; // 文字序列
        let currentTextIndex = 0;
        let currentLetterIndex = 0;
        let totalLetters = Array(26).fill(0);
        let filledLetters = Array(26).fill(0);
        let canPaint = true;
        let completedLetters = new Set();

        function loadImage() {
            const img = new Image();
            img.onload = function() {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                canvas.width = 100;
                canvas.height = 100;
                ctx.drawImage(img, 0, 0, 100, 100);
                const imageData = ctx.getImageData(0, 0, 100, 100);
                convertToPattern(imageData.data);
            };
            img.onerror = function() {
                console.error("Failed to load image:", `${textSequence[currentTextIndex]}.bmp`);
            };
            img.src = `${textSequence[currentTextIndex]}.bmp`; // 指定圖像文件的名稱
            console.log("Loading image:", img.src);
        }

        function convertToPattern(data) {
            const pattern = [];
            for (let i = 0; i < 100; i++) {
                let line = '';
                for (let j = 0; j < 100; j++) {
                    const index = 4 * (i * 100 + j);
                    const colorKey = `${data[index]},${data[index + 1]},${data[index + 2]}`;
                    line += colorMap[colorKey] || '0';
                }
                pattern.push(line);
            }
            initializeGrid(pattern);
        }

        function initializeGrid(pattern) {
            grid.innerHTML = '';
            for (let i = 0; i < 100; i++) {
                cells[i] = [];
                for (let j = 0; j < 100; j++) {
                    const cell = document.createElement('div');
                    cell.className = 'cell';
                    const letter = pattern[i][j];
                    if (letter !== '0') {
                        cell.classList.add(`letter${letter}`);
                        if (letter === 'z') {
                            cell.style.backgroundColor = '#191919';
                        } else {
                            totalLetters[letter.charCodeAt(0) - 97]++; // 計算每個字母的總數
                        }
                    }
                    cells[i][j] = cell;
                    grid.appendChild(cell);
                }
            }
            updateCurrentLetterColor();
            canPaint = true;
            mouseDown = false;
        }

        function getIndex(letter) {
            return letter.charCodeAt(0) - 97;
        }

        function updateCurrentLetterColor() {
            const currentLetter = String.fromCharCode(97 + currentLetterIndex);
            document.querySelectorAll(`.letter${currentLetter}`).forEach(cell => {
                cell.classList.add('current');
            });
        }

        function handleMouseDown(e) {
            mouseDown = true;
            handleMouse(e);
        }

        function handleMouseUp() {
            mouseDown = false;
            canPaint = false;
        }

        function handleMouse(e) {
            const rect = grid.getBoundingClientRect();
            const x = Math.floor((e.clientX - rect.left) / 4);
            const y = Math.floor((e.clientY - rect.top) / 4);
            handlePainting(x, y);
        }

        function handleTouchStart(e) {
            canPaint = true;
            handleTouch(e);
        }

        function handleTouchEnd() {
            canPaint = false;
        }

        function handleTouch(e) {
            e.preventDefault();
            const touch = e.touches[0];
            const rect = grid.getBoundingClientRect();
            const x = Math.floor((touch.clientX - rect.left) / 4);
            const y = Math.floor((touch.clientY - rect.top) / 4);
            handlePainting(x, y);
        }

        function handlePainting(x, y) {
            fillCircle(x, y, 10);
        }

        function fillCircle(cx, cy, radius) {
            let painted = false;
            for (let i = -radius; i <= radius; i++) {
                for (let j = -radius; j <= radius; j++) {
                    if (i * i + j * j <= radius * radius) {
                        const nx = cx + j;
                        const ny = cy + i;
                        if (nx >= 0 && nx < 100 && ny >= 0 && ny < 100) {
                            const targetCell = cells[ny][nx];
                            const letter = String.fromCharCode(97 + currentLetterIndex);
                            if (targetCell.classList.contains(`letter${letter}`) && !targetCell.style.backgroundColor) {
                                targetCell.style.backgroundColor = '#000000';
                                filledLetters[currentLetterIndex]++;
                                painted = true;
                            } else if (completedLetters.has(targetCell.className.slice(-1)) && !targetCell.style.backgroundColor) {
                                targetCell.style.backgroundColor = '#000000';
                            }
                        }
                    }
                }
            }
            if (painted) {
                updatePercentage();
            }
        }

        function updatePercentage() {
            const percentageColored = (filledLetters[currentLetterIndex] / totalLetters[currentLetterIndex]) * 100;
            percentageDisplay.textContent = `已塗色百分比：${percentageColored.toFixed(2)}%`;
            if (percentageColored >= 100 && !completedLetters.has(String.fromCharCode(97 + currentLetterIndex))) {
                completedLetters.add(String.fromCharCode(97 + currentLetterIndex));
                if (currentLetterIndex < 25) {
                    currentLetterIndex++;
                    updateCurrentLetterColor();
                    canPaint = false;
                    document.addEventListener('mousedown', enablePaint, { once: true });
                    document.addEventListener('touchstart', enablePaint, { once: true });
                }
            }
            if (completedLetters.has('z') && percentageColored >= 100) {
                setTimeout(() => {
                    document.getElementById('nextButton').click();
                }, 1000); // 延遲1秒後觸發next
            }
        }

        function enablePaint() {
            canPaint = true;
        }

        function nextWord() {
            if (currentTextIndex < textSequence.length - 1) {
                currentTextIndex++;
                currentLetterIndex = 0;
                totalLetters = Array(26).fill(0);
                filledLetters = Array(26).fill(0);
                completedLetters.clear();
                loadImage();
            }
        }

        document.getElementById('nextButton').addEventListener('click', nextWord);

        // 禁止滾動刷新頁面
        document.addEventListener('touchmove', function(event) {
            event.preventDefault();
        }, { passive: false });

        // 初始化遊戲
        window.onload = loadImage;

        // 添加鼠标和触摸事件监听器
        grid.addEventListener('mousedown', handleMouseDown);
        grid.addEventListener('mouseup', handleMouseUp);
        grid.addEventListener('mousemove', function(e) {
            if (mouseDown && canPaint) {
                handleMouse(e);
            }
        });

        grid.addEventListener('touchstart', handleTouchStart, { passive: false });
        grid.addEventListener('touchend', handleTouchEnd, { passive: false });
        grid.addEventListener('touchmove', function(e) {
            if (canPaint) {
                handleTouch(e);
            }
        }, { passive: false });
    </script>
</body>
</html>

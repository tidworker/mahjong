<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Let's Write</title>
    <style>
        body, html {
            flex-direction: column;
            background-color: #F2F2F2;
            margin: 0;
            padding: 0;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100%;
        }
        #container {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #grid {
            display: grid;
            grid-template-columns: repeat(100, 4px);
            grid-template-rows: repeat(100, 4px);
        }
        .cell {
            width: 4px;
            height: 4px;
            background-color: transparent;
            box-sizing: border-box;
        }
        .lettera, .letterb, .letterc, .letterd, .lettere, .letterf, .letterg, .letterh, .letteri, .letterj,
        .letterk, .letterl, .letterm, .lettern, .lettero, .letterp, .letterq, .letterr, .letters, .lettert,
        .letteru, .letterv, .letterw, .letterx, .lettery, .letterz {
            background-color: #d3d3d3;
        }
        .current {
            background-color: #808080;
        }
        #percentage {
            margin-top: 0px;
            font-size: 5px;
            color: #F2F2F2;
        }
    </style>
</head>
<body>
    <div id="container">
        <div id="grid" class="grid"></div>
        <div id="percentage">已塗色百分比：0%</div>
    </div>

    <script>
        const gridContainer = document.getElementById('grid');
        const percentageDisplay = document.getElementById('percentage');
        const colorMap = {
            '0,0,0': 'a',
            '127,127,127': 'b',
            '136,0,21': 'c',
            '237,28,36': 'd',
            '255,127,39': 'e',
            '255,242,0': 'f',
            '34,177,76': 'g',
            '0,162,232': 'h',
            '63,72,204': 'i'
        };

        let totalLetters = Array(26).fill(0);
        let filledLetters = Array(26).fill(0);
        let currentLetterIndex = 0;
        let canPaint = true;
        let completedLetters = new Set();
        let currentBlock = 0;
        let patternList = [];
        let mouseDown = false;

        function loadImage() {
            const img = new Image();
            img.onload = function() {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                canvas.width = 1000;
                canvas.height = 1000;
                ctx.drawImage(img, 0, 0, 1000, 1000);
                const imageData = ctx.getImageData(0, 0, 1000, 1000);
                processImage(imageData.data);
            };
            img.src = 'test3.bmp';
        }

        function processImage(data) {
            for (let block = 0; block < 100; block++) {
                const startX = (block % 10) * 100;
                const startY = Math.floor(block / 10) * 100;
                patternList.push(createPattern(data, startX, startY));
            }
            initializeGrid(patternList[0]);
        }

        function createPattern(data, startX, startY) {
            const pattern = [];
            for (let i = 0; i < 100; i++) {
                let line = '';
                for (let j = 0; j < 100; j++) {
                    const index = 4 * ((startY + i) * 1000 + (startX + j));
                    const colorKey = `${data[index]},${data[index + 1]},${data[index + 2]}`;
                    line += colorMap[colorKey] || '0';
                }
                pattern.push(line);
            }
            return pattern;
        }

        function initializeGrid(pattern) {
            gridContainer.innerHTML = '';
            for (let i = 0; i < 100; i++) {
                for (let j = 0; j < 100; j++) {
                    const cell = document.createElement('div');
                    cell.className = 'cell';
                    const letter = pattern[i][j];
                    if (letter !== '0') {
                        cell.classList.add(`letter${letter}`);
                        if (letter === 'z') {
                            cell.style.backgroundColor = '#191919';
                        } else {
                            totalLetters[getIndex(letter)]++;
                        }
                    }
                    gridContainer.appendChild(cell);
                }
            }
            updateCurrentLetterColor();
        }

        function getIndex(letter) {
            return letter.charCodeAt(0) - 97;
        }

        function updateCurrentLetterColor() {
            const currentLetter = String.fromCharCode(97 + currentLetterIndex);
            document.querySelectorAll(`.letter${currentLetter}`).forEach(cell => {
                cell.classList.add('current');
            });
        }

        gridContainer.addEventListener('mousedown', handleMouseDown);
        gridContainer.addEventListener('mouseup', handleMouseUp);
        gridContainer.addEventListener('mousemove', function(e) {
            if (mouseDown && canPaint) {
                handleMouse(e);
            }
        });

        gridContainer.addEventListener('touchstart', handleTouchStart, { passive: false });
        gridContainer.addEventListener('touchend', handleTouchEnd, { passive: false });
        gridContainer.addEventListener('touchmove', function(e) {
            if (canPaint) {
                handleTouch(e);
            }
        }, { passive: false });

        function handleMouseDown(e) {
            mouseDown = true;
            handleMouse(e);
        }

        function handleMouseUp() {
            mouseDown = false;
            canPaint = false;
        }

        function handleMouse(e) {
            const rect = gridContainer.getBoundingClientRect();
            const x = Math.floor((e.clientX - rect.left) / 4);
            const y = Math.floor((e.clientY - rect.top) / 4);
            handlePainting(x, y);
        }

        function handleTouchStart(e) {
            canPaint = true;
            handleTouch(e);
        }

        function handleTouchEnd() {
            canPaint = false;
        }

        function handleTouch(e) {
            e.preventDefault();
            const touch = e.touches[0];
            const rect = gridContainer.getBoundingClientRect();
            const x = Math.floor((touch.clientX - rect.left) / 4);
            const y = Math.floor((touch.clientY - rect.top) / 4);
            handlePainting(x, y);
        }

        function handlePainting(x, y) {
            fillCircle(x, y, 10);
        }

        function fillCircle(cx, cy, radius) {
            let painted = false;
            for (let i = -radius; i <= radius; i++) {
                for (let j = -radius; j <= radius; j++) {
                    if (i * i + j * j <= radius * radius) {
                        const nx = cx + j;
                        const ny = cy + i;
                        if (nx >= 0 && nx < 100 && ny >= 0 && ny < 100) {
                            const targetCell = gridContainer.querySelectorAll('.cell')[ny * 100 + nx];
                            const letter = String.fromCharCode(97 + currentLetterIndex);
                            if (targetCell.classList.contains(`letter${letter}`) && !targetCell.style.backgroundColor) {
                                targetCell.style.backgroundColor = '#000000';
                                filledLetters[getIndex(letter)]++;
                                painted = true;
                            }
                        }
                    }
                }
            }
            if (painted) {
                updatePercentage();
            }
        }

        function updatePercentage() {
            const currentLetter = String.fromCharCode(97 + currentLetterIndex);
            const totalCurrentLetter = totalLetters[getIndex(currentLetter)];
            const totalCurrentFilled = filledLetters[getIndex(currentLetter)];
            const totalPercentageColored = (totalCurrentFilled / totalCurrentLetter) * 100;

            percentageDisplay.textContent = `已塗色百分比：${totalPercentageColored.toFixed(2)}%`;

            if (totalPercentageColored >= 100 && !completedLetters.has(currentLetter)) {
                completedLetters.add(currentLetter);
                if (currentLetterIndex < 25) {
                    currentLetterIndex++;
                    updateCurrentLetterColor();
                    canPaint = false;
                    document.addEventListener('mousedown', startNextLetter, { once: true });
                    document.addEventListener('touchstart', startNextLetter, { once: true });
                }
            }

            if (completedLetters.size === 26) {
                currentLetterIndex = 0;
                completedLetters.clear();
                if (currentBlock < 99) {
                    currentBlock++;
                    initializeGrid(patternList[currentBlock]);
                } else {
                    alert('所有矩陣已完成');
                }
                filledLetters = Array(26).fill(0);
                totalLetters = Array(26).fill(0);
                updateCurrentLetterColor();
            }
        }

        function startNextLetter() {
            canPaint = true;
        }

        document.addEventListener('touchmove', function(event) {
            event.preventDefault();
        }, { passive: false });

        window.onload = loadImage;
    </script>
</body>
</html>
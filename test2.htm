<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Matrix Reader</title>
    <style>
        body, html {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            margin: 0;
            padding: 0;
            background-color: #f2f2f2;
        }
        #matrix-container {
            display: grid;
            grid-template-columns: repeat(100, 4px);
            grid-template-rows: repeat(100, 4px);
            gap: 0;
            margin-top: 20px;
        }
        .cell {
            width: 4px;
            height: 4px;
            background-color: #fff;
        }
        .lettera, .letterb, .letterc, .letterd, .lettere, .letterf, .letterg, .letterh, .letteri {
            background-color: #d3d3d3;
        }
        .letter0 {
            background-color: #fff;
        }
        #controls {
            margin-top: 20px;
        }
        button {
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            margin: 0 10px;
        }
    </style>
</head>
<body>
    <h1>Matrix Reader</h1>
    <div id="matrix-container"></div>
    <div id="controls">
        <button id="prevButton">Prev</button>
        <button id="nextButton">Next</button>
    </div>

    <script>
        let currentBlockIndex = 0;
        let blocks = [];
        let currentMatrix = [];
        let mouseDown = false;
        let canPaint = true;
        let lastX = -1, lastY = -1;
        let currentLetter = 'a'; // 当前要填色的字母
        const letters = 'abcdefghijklmnoqrstuvwxyz'.split('');
        let filledCells = 0; // 当前字母已填色的单元格数量
        let totalCells = 0; // 当前字母的总单元格数量

        const colorMap = {
            '0,0,0': 'a',
            '127,127,127': 'b',
            '136,0,21': 'c',
            '237,28,36': 'd',
            '255,127,39': 'e',
            '255,242,0': 'f',
            '34,177,76': 'g',
            '0,162,232': 'h',
            '63,72,204': 'i',
            '255,255,255': '0'  // 白色代表0，不可上色
        };

        window.onload = function() {
            const img = new Image();
            img.onload = function() {
                processImage(img);
                // 计算初始字母的总单元格数量
                for (let i = 0; i < currentMatrix.length; i++) {
                    for (let j = 0; j < currentMatrix[i].length; j++) {
                        const letter = currentMatrix[i][j];
                        if (letter === currentLetter) {
                            totalCells++;
                        }
                    }
                }
            };
            img.src = 'test3.bmp';
        };

        function processImage(img) {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = 1000;
            canvas.height = 1000;
            ctx.drawImage(img, 0, 0, 1000, 1000);
            const imageData = ctx.getImageData(0, 0, 1000, 1000);
            blocks = extractBlocks(imageData.data);
            displayBlock(0);
        }

        function extractBlocks(data) {
            const blocks = [];
            for (let blockY = 0; blockY < 10; blockY++) {
                for (let blockX = 0; blockX < 10; blockX++) {
                    const block = [];
                    const startX = blockX * 100;
                    const startY = blockY * 100;
                    for (let y = 0; y < 100; y++) {
                        const row = [];
                        for (let x = 0; x < 100; x++) {
                            const index = 4 * ((startY + y) * 1000 + (startX + x));
                            const r = data[index];
                            const g = data[index + 1];
                            const b = data[index + 2];
                            const colorKey = `${r},${g},${b}`;
                            const letter = colorMap[colorKey] || '0';  // 将色码转换为对应的字母
                            row.push(letter);
                        }
                        block.push(row);
                    }
                    blocks.push(block);
                }
            }
            return blocks;
        }

        function displayBlock(index) {
            const container = document.getElementById('matrix-container');
            container.innerHTML = '';
            currentMatrix = blocks[index];
            filledCells = 0;
            totalCells = 0;
            for (let i = 0; i < currentMatrix.length; i++) {
                for (let j = 0; j < currentMatrix[i].length; j++) {
                    const cell = document.createElement('div');
                    cell.className = 'cell';
                    const letter = currentMatrix[i][j];
                    if (letter !== '0') {
                        cell.classList.add(`letter${letter}`);
                        if (letter === currentLetter) {
                            totalCells++;
                        }
                    } else {
                        cell.classList.add('letter0');
                    }
                    container.appendChild(cell);
                }
            }
        }

        document.getElementById('prevButton').addEventListener('click', function() {
            if (currentBlockIndex > 0) {
                currentBlockIndex--;
                displayBlock(currentBlockIndex);
            }
        });

        document.getElementById('nextButton').addEventListener('click', function() {
            if (currentBlockIndex < blocks.length - 1) {
                currentBlockIndex++;
                displayBlock(currentBlockIndex);
            }
        });

        document.getElementById('matrix-container').addEventListener('mousedown', handleMouseDown);
        document.getElementById('matrix-container').addEventListener('touchstart', handleMouseDown, { passive: false });
        document.addEventListener('mouseup', handleMouseUp);
        document.addEventListener('touchend', handleMouseUp, { passive: false });
        document.getElementById('matrix-container').addEventListener('mousemove', function(e) {
            if (mouseDown && canPaint) {
                handleMouse(e);
            }
        });
        document.getElementById('matrix-container').addEventListener('touchmove', function(e) {
            if (canPaint) {
                handleTouch(e);
            }
        }, { passive: false });

        function handleMouseDown(e) {
            mouseDown = true;
            canPaint = true;
            lastX = -1;
            lastY = -1;
            handleMouse(e);
        }

        function handleMouseUp() {
            mouseDown = false;
            canPaint = false;
            lastX = -1;
            lastY = -1;
            checkIfLetterFilled();
        }

        function handleMouse(e) {
            const rect = document.getElementById('matrix-container').getBoundingClientRect();
            const x = Math.floor((e.clientX - rect.left) / 4);
            const y = Math.floor((e.clientY - rect.top) / 4);
            paintLine(lastX, lastY, x, y);
            lastX = x;
            lastY = y;
        }

        function handleTouch(e) {
            e.preventDefault();
            const touch = e.touches[0];
            const rect = document.getElementById('matrix-container').getBoundingClientRect();
            const x = Math.floor((touch.clientX - rect.left) / 4);
            const y = Math.floor((touch.clientY - rect.top) / 4);
            paintLine(lastX, lastY, x, y);
            lastX = x;
            lastY = y;
        }

        function paintLine(x0, y0, x1, y1) {
            if (x0 === -1 || y0 === -1) {
                fillCell(x1, y1);
                return;
            }

            const dx = Math.abs(x1 - x0);
            const dy = Math.abs(y1 - y0);
            const sx = (x0 < x1) ? 1 : -1;
            const sy = (y0 < y1) ? 1 : -1;
            let err = dx - dy;

            while (true) {
                fillCell(x0, y0);
                if (x0 === x1 && y0 === y1) break;
                const e2 = 2 * err;
                if (e2 > -dy) {
                    err -= dy;
                    x0 += sx;
                }

                if (e2 < dx) {
                    err += dx;
                    y0 += sy;
                }
            }
        }

        function fillCell(cx, cy) {
            if (cx >= 0 && cx < 100 && cy >= 0 && cy < 100) {
                const cellIndex = cy * 100 + cx;
                const cell = document.querySelector(`#matrix-container .cell:nth-child(${cellIndex + 1})`);
                if (cell && !cell.classList.contains('letter0') && cell.classList.contains(`letter${currentLetter}`)) {  
                    cell.style.backgroundColor = '#000000';
                    filledCells++;
                    if (filledCells >= totalCells) {
                        moveToNextLetter();
                    }
                }
            }
        }

        function checkIfLetterFilled() {
            if (filledCells >= totalCells) {
                moveToNextLetter();
            }
        }

        function moveToNextLetter() {
            const currentLetterIndex = letters.indexOf(currentLetter);
            if (currentLetterIndex < letters.length - 1) {
                currentLetter = letters[currentLetterIndex + 1];
                filledCells = 0;
                totalCells = 0;
                // 重新计算新字母的总单元格数量
                for (let i = 0; i < currentMatrix.length; i++) {
                    for (let j = 0; j < currentMatrix[i].length; j++) {
                        const letter = currentMatrix[i][j];
                        if (letter === currentLetter) {
                            totalCells++;
                        }
                    }
                }
            }
        }

        // 初始化并显示第一个字母的单元格数量
        window.onload = function() {
            const img = new Image();
            img.onload = function() {
                processImage(img);
                // 计算初始字母的总单元格数量
                for (let i = 0; i < currentMatrix.length; i++) {
                    for (let j = 0; j < currentMatrix[i].length; j++) {
                        const letter = currentMatrix[i][j];
                        if (letter === currentLetter) {
                            totalCells++;
                        }
                    }
                }
            };
            img.src = 'test3.bmp';
        };
    </script>
</body>
</html>
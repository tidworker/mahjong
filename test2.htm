<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Let's Write</title>
    <style>
        body, html {
            flex-direction: column;
            background-color: #F2F2F2;
            margin: 0;
            padding: 0;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100%;
        }
        #container {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #grid {
            display: grid;
            grid-template-columns: repeat(100, 4px);
            grid-template-rows: repeat(100, 4px);
        }
        .cell {
            width: 4px;
            height: 4px;
            background-color: transparent;
            box-sizing: border-box;
        }
        .lettera, .letterA, .letterb, .letterB, .letterc, .letterC, .letterd, .letterD, .lettere, .letterE,
        .letterf, .letterF, .letterg, .letterG, .letterh, .letterH, .letteri, .letterI, .letterj, .letterJ,
        .letterk, .letterK, .letterl, .letterL, .letterm, .letterM, .lettern, .letterN, .lettero, .letterO,
        .letterp, .letterP, .letterq, .letterQ, .letterr, .letterR, .letters, .letterS, .lettert, .letterT,
        .letteru, .letterU, .letterv, .letterV, .letterw, .letterW, .letterx, .letterX, .lettery, .letterY,
        .letterz, .letterZ {
            background-color: #d3d3d3;
        }
        .current {
            background-color: #808080;
        }
        #percentage {
            margin-top: 0px;
            font-size: 5px;
            color: #F2F2F2;
        }
        #buttons img {
            cursor: pointer;
            margin: 12px;
        }
    </style>
</head>
<body>
    <div id="container">
        <div id="grid" class="grid"></div>
        <div id="percentage">已塗色百分比：0%</div>
    </div>

    <div class="image-row">
        <img src="jin.png" style="opacity: 0.3;">
        <img src="gon.png" style="opacity: 0.3;">
        <img src="ban.png" style="opacity: 0.3;">
        <img src="row.png" style="opacity: 0.3;">
        <img src="po.png" style="opacity: 0.3;">
        <img src="ro.png" style="opacity: 0.3;">
        <img src="mi.png" style="opacity: 0.3;">
        <img src="jinn.png" style="opacity: 0.3;">
    </div>
    <br>
    <br>
    <div id="buttons">
        <img src="back.png" onclick="history.back()">
        <img src="re.png" onclick="location.reload()">
    </div>
    <br>
    <br>
    <img src="logo2.png">

    <script>
        const gridContainer = document.getElementById('grid');
        const percentageDisplay = document.getElementById('percentage');
        const colorMap = {
            '0,0,0': 'a',
            '127,127,127': 'b',
            '136,0,21': 'c',
            '237,28,36': 'd',
            '255,127,39': 'e',
            '255,242,0': 'f',
            '34,177,76': 'g',
            '0,162,232': 'h',
            '63,72,204': 'i'
        };

        let totalLetters = Array(52).fill(0);
        let filledLetters = Array(52).fill(0);
        let currentLetterIndex = 0;
        let canPaint = false;
        let completedLetters = new Set();
        let isPainting = false;
        let currentBlock = 0;
        let patternList = [];

        function loadImage() {
            const img = new Image();
            img.onload = function() {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                canvas.width = 1000;
                canvas.height = 1000;
                ctx.drawImage(img, 0, 0, 1000, 1000);
                const imageData = ctx.getImageData(0, 0, 1000, 1000);
                processImage(imageData.data);
            };
            img.src = 'test3.bmp';
        }

        function processImage(data) {
            for (let block = 0; block < 100; block++) {
                const startX = (block % 10) * 100;
                const startY = Math.floor(block / 10) * 100;
                patternList.push(createPattern(data, startX, startY));
            }
            initializeGrid(patternList[0]);
        }

        function createPattern(data, startX, startY) {
            const pattern = [];
            for (let i = 0; i < 100; i++) {
                let line = '';
                for (let j = 0; j < 100; j++) {
                    const index = 4 * ((startY + i) * 1000 + (startX + j));
                    const colorKey = `${data[index]},${data[index + 1]},${data[index + 2]}`;
                    line += colorMap[colorKey] || '0';
                }
                pattern.push(line);
            }
            return pattern;
        }

        function initializeGrid(pattern) {
            gridContainer.innerHTML = '';
            const cells = [];
            for (let i = 0; i < 100; i++) {
                cells[i] = [];
                for (let j = 0; j < 100; j++) {
                    const cell = document.createElement('div');
                    cell.className = 'cell';
                    const letter = pattern[i][j];
                    if (letter !== '0') {
                        cell.classList.add(`letter${letter}`);
                        if (letter === 'z') {
                            cell.style.backgroundColor = '#191919';
                        } else {
                            totalLetters[getIndex(letter)]++;
                        }
                    }
                    cells[i][j] = cell;
                    gridContainer.appendChild(cell);
                }
            }
            updateCurrentLetterColor();
        }

        function getIndex(letter) {
            const code = letter.charCodeAt(0);
            if (code >= 65 && code <= 90) {
                return code - 65;
            } else {
                return code - 71;
            }
        }

        function updateCurrentLetterColor() {
            const currentLetter = String.fromCharCode(currentLetterIndex < 26 ? 65 + currentLetterIndex : 97 + currentLetterIndex - 26);
            document.querySelectorAll(`.letter${currentLetter}, .letter${currentLetter.toLowerCase()}`).forEach(cell => {
                cell.classList.add('current');
            });
        }

        function removeCurrentLetterColor() {
            const currentLetter = String.fromCharCode(currentLetterIndex < 26 ? 65 + currentLetterIndex : 97 + currentLetterIndex - 26);
            document.querySelectorAll(`.letter${currentLetter}, .letter${currentLetter.toLowerCase()}`).forEach(cell => {
                cell.classList.remove('current');
            });
        }

        gridContainer.addEventListener('mousedown', handleMouse);
        gridContainer.addEventListener('mousemove', function(e) {
            if (e.buttons === 1) {
                handleMouse(e);
            }
        });

        gridContainer.addEventListener('touchstart', handleTouch, { passive: false });
        gridContainer.addEventListener('touchmove', handleTouch, { passive: false });

        function handleTouch(e) {
            e.preventDefault();
            const touch = e.touches[0];
            const rect = gridContainer.getBoundingClientRect();
            const x = Math.floor((touch.clientX - rect.left) / 4);
            const y = Math.floor((touch.clientY - rect.top) / 4);
            handlePainting(x, y);
        }

        function handleMouse(e) {
            const rect = gridContainer.getBoundingClientRect();
            const x = Math.floor((e.clientX - rect.left) / 4);
            const y = Math.floor((e.clientY - rect.top) / 4);
            handlePainting(x, y);
        }

        function handlePainting(x, y) {
            if (!canPaint) {
                fillCircle(x, y, 10, true); // 检查是否能够涂色
            }
            if (canPaint) {
                fillCircle(x, y, 10); // 开始涂色
            }
        }

        function fillCircle(cx, cy, radius, checkOnly = false) {
            let painted = false;
            for (let i = -radius; i <= radius; i++) {
                for (let j = -radius; j <= radius; j++) {
                    if (i * i + j * j <= radius * radius) {
                        const nx = cx + j;
                        const ny = cy + i;
                        if (nx >= 0 && nx < 100 && ny >= 0 && ny < 100) {
                            const targetCell = gridContainer.querySelectorAll('.cell')[ny * 100 + nx];
                            const letter = String.fromCharCode(currentLetterIndex < 26 ? 65 + currentLetterIndex : 97 + currentLetterIndex - 26);
                            if (checkOnly) {
                                if (targetCell.classList.contains(`letter${letter}`) || targetCell.classList.contains(`letter${letter.toLowerCase()}`)) {
                                    canPaint = true;
                                    return;
                                }
                            } else {
                                if ((targetCell.classList.contains(`letter${letter}`) || targetCell.classList.contains(`letter${letter.toLowerCase()}`)) && !targetCell.style.backgroundColor) {
                                    targetCell.style.backgroundColor = '#000000';
                                    if (targetCell.classList.contains(`letter${letter}`) || targetCell.classList.contains(`letter${letter.toLowerCase()}`)) {
                                        filledLetters[getIndex(letter)]++;
                                        painted = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (painted) {
                isPainting = true; // 开始涂色
                updatePercentage();
            }
        }

        function updatePercentage() {
            const currentLetter = String.fromCharCode(currentLetterIndex < 26 ? 65 + currentLetterIndex : 97 + currentLetterIndex - 26);
            const totalCurrentLetter = totalLetters[getIndex(currentLetter)];
            const totalLowercaseLetter = totalLetters[getIndex(currentLetter.toLowerCase())];
            const totalCurrentFilled = filledLetters[getIndex(currentLetter)];
            const totalLowercaseFilled = filledLetters[getIndex(currentLetter.toLowerCase())];
            const totalPercentageColored = ((totalCurrentFilled + totalLowercaseFilled) / (totalCurrentLetter + totalLowercaseLetter)) * 100;

            percentageDisplay.textContent = `已塗色百分比：${totalPercentageColored.toFixed(2)}%`;

            if (totalPercentageColored >= 97 && !completedLetters.has(currentLetter)) {
                completedLetters.add(currentLetter);
                if (currentLetterIndex < 51) {
                    currentLetterIndex++;
                } else {
                    currentLetterIndex = 0;
                    if (currentBlock < 99) {
                        currentBlock++;
                        initializeGrid(patternList[currentBlock]);
                    } else {
                        alert('所有矩陣已完成');
                    }
                }
                updateCurrentLetterColor();
                canPaint = false;
                isPainting = false;
                filledLetters = Array(52).fill(0);
                totalLetters = Array(52).fill(0);
            }
        }

        // 禁止滚动刷新页面
        document.addEventListener('touchmove', function(event) {
            event.preventDefault();
        }, { passive: false });

        // 初始化游戏
        window.onload = loadImage;
    </script>
</body>
</html>
